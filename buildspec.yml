version: 0.2
env:
  parameter-store:
    DOCKER_HUB_USER: "/Test/DockerHub/User"
    DOCKER_HUB_PASS: "/Test/DockerHub/Pass"
    GITHUB_USER: "/Test/Git/User"
    GITHUB_PASS: "/Test/Git/Pass"
phases:
  install:
    commands:
      - echo Installing Mocha...
      - npm install -g mocha

      # CodePipeline creates artifacts using zip format, which does not preserve the permissions/modes.
      # we must reset permissions here
      - chmod 755 qemu-arm-static

      - apt-get update
      - apt-get install rsync -y

  pre_build:
    commands:
      # make a default directory that is required for the manager to start up. Normally this is handled by the install
      # tools.
      - mkdir -p /root/lightning-node

      - echo Installing source NPM dependencies...
      - npm install
  build:
    commands:
      - echo Running tests

      - npm test

      - echo Building the Docker image ...

      # building
      # Remove qemu-static if non-arm, or register
      - |
        if [ $ARCH != arm ]; then
          rm qemu-arm-static
        else
          docker run --rm --privileged multiarch/qemu-user-static:register --reset
        fi
      - docker build --build-arg GITHUB_USER=$GITHUB_USER --build-arg GITHUB_PASS=$GITHUB_PASS . -f $DOCKERFILE -t $ORGANIZATION/$REPOSITORY:$ARCH
      - docker tag $ORGANIZATION/$REPOSITORY:$ARCH $ORGANIZATION/$REPOSITORY:$ARCH

      # Hacky way to determine what branch we are in. $CODEBUILD_SOURCE_VERSION is the git commit we are currently
      # building. We search all local branches to get a list of branches that include that git commit. We return all
      # alpha characters from the branch we are looking for.
      #
      # Ex.
      # master => master
      # release/1.0.0 => release

      - masterBranchText=$(git branch --contains $CODEBUILD_SOURCE_VERSION | grep master | sed 's/[^a-zA-Z]//g')
      - releaseBranchText=$(git branch --contains $CODEBUILD_SOURCE_VERSION | grep release | sed 's/[^a-zA-Z]//g')
      - developBranchText=$(git branch --contains $CODEBUILD_SOURCE_VERSION | grep develop | sed 's/[^a-zA-Z]//g')

      # push image to docker
      - docker login --username=$DOCKER_HUB_USER --password=$DOCKER_HUB_PASS

      # Since a git commit can be in multiple branches, we will start with master and work our way down. If a git commit
      # exists in master, release, and develop, it really means we want to deploy master. Likewise, if a git commit exists
      # in release and develop, we release want to deploy release.
      #
      # Public vs Private
      # Casa Inc releases code publicly for various reasons. We also develop features in private before the public
      # release. Historically we have used the private casacomputer organization on docker hub. We have since migrated
      # to casanode for our public releases. We will support legacy nodes running on casacomputer until March 2020.
      - |
        if [ "$masterBranchText" = "master" ]; then
          echo "pushing production to docker"
          docker tag $ORGANIZATION/$REPOSITORY:$ARCH $ORGANIZATION/$REPOSITORY:$ARCH
          docker push $ORGANIZATION/$REPOSITORY:$ARCH

          if [ "$PUBLIC" = "true" ]; then
            docker tag casacomputer/$REPOSITORY:$ARCH casacomputer/$REPOSITORY:$ARCH
            docker push casacomputer/$REPOSITORY:$ARCH
          fi
        elif [ "$releaseBranchText" = "release" ] && [ "$PUBLIC" = "false" ]; then
          echo "pushing to stage to docker hub"
          docker tag $ORGANIZATION/$REPOSITORY:$ARCH $ORGANIZATION/$REPOSITORY:$ARCH-stage
          docker push $ORGANIZATION/$REPOSITORY:$ARCH-stage
        elif [ "$developBranchText" = "develop" ] && [ "$PUBLIC" = "false" ]; then
          echo "pushing develop to docker"
          docker tag $ORGANIZATION/$REPOSITORY:$ARCH $ORGANIZATION/$REPOSITORY:$ARCH-develop
          docker push $ORGANIZATION/$REPOSITORY:$ARCH-develop
        else
           echo "docker image has been built, but not pushed to docker hub"
        fi
  post_build:
    commands:
      - echo Build completed on `date`
